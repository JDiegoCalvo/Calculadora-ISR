if ( 'serviceWorker' in navigator ) 
{
	navigator.serviceWorker
	.register( 'sw.js' )
}

function tarifas_mensuales_de_ISR( ejercicio )
{
	let tarifario_ISR; 

	if ( ejercicio == '2021' )
	{
		tarifario_ISR = [
			[ 0.01, 644.58, 0.00, 1.92 ],
			[ 644.59, 5470.92, 12.38, 6.40 ],
			[ 5470.93, 9614.66, 321.26, 10.88 ],
			[ 9614.67, 11176.62, 772.10, 16.00 ],
			[ 11176.63, 13381.47, 1022.01, 17.92 ],
			[ 13381.48, 26988.50, 1417.12, 21.36 ],
			[ 26988.51, 42537.58, 4323.58, 23.52 ],
			[ 42537.59, 81211.25, 7980.73, 30.00 ],
			[ 81211.26, 108281.67, 19582.83, 32.00 ],
			[ 108281.68, 324845.01, 28245.36, 34.00 ],
			[ 324845.02, 'En adelante', 101876.90, 35.00 ]
		];

	}else if ( 
		ejercicio == '2020' || 
		ejercicio == '2019' || 
		ejercicio == '2018' 
	)
	{
		tarifario_ISR = [
			[ 0.01, 578.52, 0.00, 1.92 ],
			[ 578.53, 4910.18, 11.11, 6.40 ],
			[ 4910.19, 8629.20, 288.33, 10.88 ],
			[ 8629.21, 10031.07, 692.96, 16.00 ],
			[ 10031.08, 12009.94, 917.26, 17.92 ],
			[ 12009.95, 24222.31, 1271.87, 21.36 ],
			[ 24222.32, 38177.69, 3880.44, 23.52 ],
			[ 38177.70, 72887.50, 7162.74, 30.00 ],
			[ 72887.51, 97183.33, 17575.69, 32.00 ],
			[ 97183.34, 291550, 25350.35, 34.00 ],
			[ 291550.01, 'En adelante', 91435.02, 35.00 ]
		];

	}else
	{
		tarifario_ISR = [
			[ 0.01, 496.07, 0.00, 1.92 ],
			[ 496.08, 4210.41, 9.52, 6.40 ],
			[ 4210.42, 7399.42, 247.24, 10.88 ],
			[ 7399.43, 8601.50, 594.21, 16.00 ],
			[ 8601.51, 10298.35, 786.54, 17.92 ],
			[ 10298.36, 20770.29, 1090.61, 21.36 ],
			[ 20770.30, 32736.83, 3327.42, 23.52 ],
			[ 32736.84, 62500.00, 6141.95, 30.00 ],
			[ 62500.01, 83333.33, 15070.90, 32.00 ],
			[ 83333.34, 250000.00, 21737.57, 34.00 ],
			[ 250000.01, 'En adelante', 78404.23, 35.00 ]
		];

	}

	return tarifario_ISR;
}

function tarifas_bimestrales_de_ISR( ejercicio )
{
	let tarifario_ISR; 

	if ( ejercicio == '2021' )
	{
		tarifario_ISR = [
			[ 0.01, 1289.16, 0.00, 1.92 ],
			[ 1289.17, 10941.84, 24.76, 6.40 ],
			[ 10941.85, 19229.32, 642.52, 10.88 ],
			[ 19229.33, 22353.24, 1544.20, 16.00 ],
			[ 22353.25, 26762.94, 2044.02, 17.92 ],
			[ 26762.95, 53977.00, 2834.24, 21.36 ],
			[ 53977.01, 85075.16, 8647.16, 23.52 ],
			[ 85075.17, 162422.50, 15961.46, 30.00 ],
			[ 162422.51, 216563.34, 39165.66, 32.00 ],
			[ 216563.35, 649690.02, 56490.72, 34.00 ],
			[ 649690.03, 'En adelante', 203753.80, 35.00 ]
		];
		
	}else if ( 
		ejercicio == '2020' || 
		ejercicio == '2019' || 
		ejercicio == '2018' 
	)
	{
		tarifario_ISR = [
			[ 0.01, 1157.04, 0.00, 1.92 ],
			[ 1157.05, 9820.36, 22.22, 6.40 ],
			[ 9820.37, 17258.40, 576.66, 10.88 ],
			[ 17258.41, 20062.14, 1385.92, 16.00 ],
			[ 20062.15, 24019.88, 1834.52, 17.92 ],
			[ 24019.89, 48444.62, 2543.74, 21.36 ],
			[ 48444.63, 76355.38, 7760.88, 23.52 ],
			[ 76355.39, 145775.00, 14325.48, 30.00 ],
			[ 145775.01, 194366.66, 35151.38, 32.00 ],
			[ 194366.67, 583100.00, 50700.70, 34.00 ],
			[ 583100.01, 'En adelante', 182870.04, 35.00 ]
		];

	}else
	{
		tarifario_ISR = [
			[ 0.01, 992.14, 0.00, 1.92 ],
			[ 992.15, 8420.82, 19.04, 6.40 ],
			[ 8420.83, 14798.84, 494.48, 10.88 ],
			[ 14798.85, 17203.00, 1188.42, 16.00 ],
			[ 17203.01, 20596.70, 1573.08, 17.92 ],
			[ 20596.71, 41540.58, 2181.22, 21.36 ],
			[ 41540.59, 65473.66, 6654.84, 23.52 ],
			[ 65473.67, 125000.00, 12283.90, 30.00 ],
			[ 125000.01, 166666.66, 30141.80, 32.00 ],
			[ 166666.67, 500000.00, 43475.14, 34.00 ],
			[ 500000.01, 'En adelante', 156808.46, 35.00 ]
		];


	}

	return tarifario_ISR;
}

function mostrar_calculadora_de_ISR( regimen )
{
	// Validamos que se haya elegido un régimen válido
	if ( regimen.value.length > 0 )
	{
		// Ocultamos todas las calculadoras
		PFAEP_div.classList.add( 'd-none' );
		IF_div.classList.add( 'd-none' );
		Arrendamiento_div.classList.add( 'd-none' );
		GDL_div.classList.add( 'd-none' );

		// Mostramos la única calculadora, la que elegimos
		document.getElementById( regimen.value ).classList.remove( 'd-none' );

	}
}

function calcular_ISR_PFAEP()
{
	// Cálculos
	const ingresos_de_periodos_anteriores = PFAEP_ingresos_de_periodos_anteriores.value ? PFAEP_ingresos_de_periodos_anteriores.value : 0;

	const ingresos_del_periodo = PFAEP_ingresos_del_periodo.value ? PFAEP_ingresos_del_periodo.value : 0;

	const total_de_ingresos = parseFloat( ingresos_de_periodos_anteriores ) + parseFloat( ingresos_del_periodo );

	const deduciones_de_periodos_anteriores = PFAEP_compras_y_gastos_de_periodos_anteriores.value ? PFAEP_compras_y_gastos_de_periodos_anteriores.value : 0;

	const deducciones_del_periodo = PFAEP_compras_y_gastos_del_periodo.value ? PFAEP_compras_y_gastos_del_periodo.value : 0;

	const total_de_deducciones = parseFloat( deduciones_de_periodos_anteriores ) + parseFloat( deducciones_del_periodo );

	const deducciones_de_inversiones_de_periodos_anteriores = PFAEP_deduccion_de_inversiones_de_ejercicios_anteriores.value ? PFAEP_deduccion_de_inversiones_de_ejercicios_anteriores.value : 0;

	const PTU = PFAEP_participacion_de_los_trabajadores_en_las_utilidades.value ? PFAEP_participacion_de_los_trabajadores_en_las_utilidades.value : 0;

	const perdidas_fiscales_de_periodos_anteriores = PFAEP_perdidas_fiscales_de_ejercicios_anteriores.value ? PFAEP_perdidas_fiscales_de_ejercicios_anteriores.value : 0;

	let base = total_de_ingresos - total_de_deducciones - deducciones_de_inversiones_de_periodos_anteriores - PTU - perdidas_fiscales_de_periodos_anteriores;

	if ( base < 0 )
	{
		base = 0;

	}

	const ISR_causado = calcular_ISR_causado( PFAEP_ejercicio.value, PFAEP_periodo.value, 'A', base );

	const pagos_provisionales_de_periodos_anteriores = PFAEP_pagos_provisionales_efectuados_con_anterioridad.value ? PFAEP_pagos_provisionales_efectuados_con_anterioridad.value : 0;

	const ISR_retenido_de_periodos_anteriores = PFAEP_ISR_retenido_de_periodos_anteriores.value ? PFAEP_ISR_retenido_de_periodos_anteriores.value : 0;

	const ISR_retenido_del_periodo = PFAEP_ISR_retenido_del_periodo.value ? PFAEP_ISR_retenido_del_periodo.value : 0;

	const impuesto_retenido = parseFloat( ISR_retenido_de_periodos_anteriores ) + parseFloat( ISR_retenido_del_periodo );

	let ISR_a_cargo = ISR_causado - pagos_provisionales_de_periodos_anteriores - impuesto_retenido;

	if ( ISR_a_cargo < 0 )
	{
		ISR_a_cargo = 0;

	}

	// Render en HTML
	PFAEP_total_de_ingresos.innerHTML = numeral( total_de_ingresos ).format( '0,0.00' );

	PFAEP_total_de_compras_y_gastos.innerHTML = numeral( total_de_deducciones ).format( '0,0.00' );

	PFAEP_base_gravable_del_pago_provisional.innerHTML = numeral( base ).format( '0,0.00' );

	PFAEP_ISR_causado.innerHTML = numeral( ISR_causado ).format( '0,0.00' );

	PFAEP_impuesto_retenido.innerHTML = numeral( impuesto_retenido ).format( '0,0.00' );

	PFAEP_ISR_a_cargo.innerHTML = numeral( ISR_a_cargo ).format( '0,0.00' );
}

function calcular_ISR_IF()
{
	// Cálculos
	const ingresos_del_periodo = IF_ingresos_cobrados.value ? IF_ingresos_cobrados.value : 0;

	const deducciones_del_periodo = IF_compras_y_gastos_pagados.value ? IF_compras_y_gastos_pagados.value : 0;

	const PTU = IF_participacion_de_utilidades.value ? IF_participacion_de_utilidades.value : 0;

	const perdidas_fiscales_de_periodos_anteriores = IF_diferencia.value ? IF_diferencia.value : 0;

	let base = ingresos_del_periodo - deducciones_del_periodo - PTU - perdidas_fiscales_de_periodos_anteriores;

	if ( base < 0 )
	{
		base = 0;

	}

	const ISR_causado = calcular_ISR_causado( IF_ejercicio.value, IF_periodo.value, 'B', base );

	const reduccion_de_ISR = ISR_causado * porcentaje_de_reduccion_de_ISR_select.value;

	const impuesto_retenido = IF_ISR_retenido.value ? IF_ISR_retenido.value : 0;

	const subsidio_al_empleo = IF_subsidio.value ? IF_subsidio.value : 0;

	let ISR_a_cargo = ISR_causado - reduccion_de_ISR - impuesto_retenido - subsidio_al_empleo;

	if ( ISR_a_cargo < 0 )
	{
		ISR_a_cargo = 0;

	}

	// Render en HTML
	IF_utilidad.innerHTML = numeral( base ).format( '0,0.00' );

	IF_ISR_determinado.innerHTML = numeral( ISR_causado ).format( '0,0.00' );

	IF_deduccion.innerHTML = numeral( reduccion_de_ISR ).format( '0,0.00' );

	IF_ISR_a_pagar.innerHTML = numeral( ISR_causado - reduccion_de_ISR ).format( '0,0.00' );

	IF_cantidad_a_pagar.innerHTML = numeral( ISR_a_cargo ).format( '0,0.00' );
}

function calcular_ISR_Arrendamiento()
{
	// Cálculos
	const total_de_ingresos = parseFloat( A_total_de_ingresos.value ? A_total_de_ingresos.value : 0 );

	const deducciones_autorizadas = parseFloat( total_de_ingresos * 0.35 );

	const impuesto_predial = parseFloat( A_impuesto_predial.value ? A_impuesto_predial.value : 0 );

	const total_de_deducciones_autorizadas = deducciones_autorizadas + impuesto_predial;

	const base_gravable_del_pago_provisional = total_de_ingresos - total_de_deducciones_autorizadas;
	
	const ISR_causado = calcular_ISR_causado( A_ejercicio.value, A_periodo.value, 'A', base_gravable_del_pago_provisional );

	const impuesto_retenido = parseFloat( A_impuesto_retenido.value ? A_impuesto_retenido.value  : 0 );

	let ISR_a_cargo = ISR_causado - impuesto_retenido;

	if ( ISR_a_cargo < 0 )
	{
		ISR_a_cargo = 0;

	}

	// Render en HTML
	A_deducciones_autorizadas.innerHTML = numeral( deducciones_autorizadas ).format( '0,0.00' );

	A_total_de_deducciones_autorizadas.innerHTML = numeral( total_de_deducciones_autorizadas ).format( '0,0.00' );

	A_base_gravable_del_pago_provisional.innerHTML = numeral( base_gravable_del_pago_provisional ).format( '0,0.00' );

	A_ISR_causado.innerHTML = numeral( ISR_causado ).format( '0,0.00' );

	A_impuesto_retenido.innerHTML = impuesto_retenido;

	A_ISR_a_cargo.innerHTML = numeral( ISR_a_cargo ).format( '0,0.00' );
}

function calcular_ISR_GDL()
{
	// Cálculos
	const ingresos_de_periodos_anteriores = GDL_ingresos_de_periodos_anteriores.value ? GDL_ingresos_de_periodos_anteriores.value : 0;

	const ingresos_del_periodo = GDL_ingresos_del_periodo.value ? GDL_ingresos_del_periodo.value : 0;

	const total_de_ingresos = parseFloat( ingresos_de_periodos_anteriores ) + parseFloat( ingresos_del_periodo );

	const utilidad = total_de_ingresos * GDL_coeficiente_de_utilidad.value;

	const utilidad_adicionada = parseFloat( utilidad ) + parseFloat( GDL_inventario_acumulable.value ? GDL_inventario_acumulable.value : 0 );

	const PTU = GDL_PTU.value ? GDL_PTU.value : 0;

	const anticipos = GDL_anticipos.value ? GDL_anticipos.value : 0;

	const perdidas_fiscales_de_periodos_anteriores = GDL_perdidas_fiscales.value ? GDL_perdidas_fiscales.value : 0;

	let base = utilidad_adicionada - PTU - anticipos - perdidas_fiscales_de_periodos_anteriores;

	if ( base < 0 )
	{
		base = 0;

	}

	const ISR_causado = base * 0.30;

	const pagos_provisionales_de_periodos_anteriores = GDL_pagos_provisionales_de_periodos_anteriores.value ? GDL_pagos_provisionales_de_periodos_anteriores.value : 0;

	const impuesto_retenido = GDL_impuesto_retenido.value ? GDL_impuesto_retenido.value : 0;

	let ISR_a_cargo = ISR_causado - pagos_provisionales_de_periodos_anteriores - impuesto_retenido;

	if ( ISR_a_cargo < 0 )
	{
		ISR_a_cargo = 0;

	}

	// Render en HTML
	GDL_total_de_ingresos_nominales.innerHTML = numeral( total_de_ingresos ).format( '0,0.00' );

	GDL_utilidad_fiscal_para_pago_provisional.innerHTML = numeral( utilidad ).format( '0,0.00' );

	GDL_utilidad_fiscal_adicionada.innerHTML = numeral( utilidad_adicionada ).format( '0,0.00' );

	GDL_base_gravable_del_pago_provisional.innerHTML = numeral( base ).format( '0,0.00' );

	GDL_ISR_causado.innerHTML = numeral( ISR_causado ).format( '0,0.00' );

	GDL_impuesto_a_cargo.innerHTML = numeral( ISR_a_cargo ).format( '0,0.00' );
}

function calcular_ISR_causado( ejercicio, periodo, variedad, base )
{
	let tarifario_ISR;

	if ( variedad == 'A' ) // Arrendamiento o PFAEP
	{
		tarifario_ISR = tarifas_mensuales_de_ISR( ejercicio );

	}else if ( variedad == 'B' ) // IF
	{
		tarifario_ISR = tarifas_bimestrales_de_ISR( ejercicio );

	}

	let ISR_causado = 0;

	if ( base > ( periodo * tarifario_ISR[10][0] ) )
	{
		ISR_causado = ( ( base - ( periodo * tarifario_ISR[10][0] ) ) * ( tarifario_ISR[10][3] / 100 ) ) + ( periodo * tarifario_ISR[10][2] );

	}else
	{
		for ( var i = 0; i < 10; i++ )
		{
			if ( base >= ( periodo * tarifario_ISR[i][0] ) && base <= ( periodo * tarifario_ISR[i][1] ) )
			{
				ISR_causado = ( ( base - ( periodo * tarifario_ISR[i][0] ) ) * ( tarifario_ISR[i][3] / 100 ) ) + ( periodo * tarifario_ISR[i][2] );

			}
		}
	}

	return ISR_causado;
}
